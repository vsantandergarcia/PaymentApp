apply plugin: 'com.android.application'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

// It is not safe to store access token raw in some file that is pushed to a public remote repository. We will
// put the access token into ignored file secrets.properties. Please create an private_key field in local.properties
// and assign your access token. For example: private_key="MyPrivateKey"

def getPrivateKey() {
    Properties properties = new Properties()
    properties.load(new File(rootDir.absolutePath + "/local.properties").newDataInputStream())
    def accessToken = properties.getProperty('private_key', null)
    if (accessToken == null) {
        throw new GradleException(
                "Oh! Access token is missing. Please go to your local.properties file and define an private_key")
    }
    return accessToken
}

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.vsantander.paymentchallenge"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        buildConfigField "String", "PRIVATE_KEY", getPrivateKey()
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    androidExtensions {
        experimental = true
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    /* Android core */
    implementation "com.android.support:appcompat-v7:$rootProject.supportLibraryVersion"
    implementation "com.android.support:design:$rootProject.supportLibraryVersion"
    implementation "com.android.support.constraint:constraint-layout:$rootProject.constraintLayoutVersion"

    /* android architecture components */
    implementation "android.arch.lifecycle:extensions:$rootProject.archLifecycleVersion"

    /* kotlin core */
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    /* kotlin/java utils */
    implementation "com.google.dagger:dagger:$rootProject.daggerVersion"
    implementation "com.google.dagger:dagger-android:$rootProject.daggerVersion"
    implementation "com.google.dagger:dagger-android-support:$rootProject.daggerVersion"
    kapt "com.google.dagger:dagger-android-processor:$rootProject.daggerVersion"
    kapt "com.google.dagger:dagger-compiler:$rootProject.daggerVersion"
    implementation "io.reactivex.rxjava2:rxandroid:$rootProject.rxAndroidVersion"
    implementation "io.reactivex.rxjava2:rxkotlin:$rootProject.rxKotlinVersion"
    implementation "org.jetbrains.anko:anko-commons:$rootProject.ankoVersion"
    implementation "com.squareup.retrofit2:retrofit:$rootProject.ext.retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$rootProject.retrofitVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$rootProject.retrofitVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$rootProject.okhttp3LoggingInterceptor"
    implementation "com.jakewharton.timber:timber:$rootProject.timberVersion"
    implementation "pub.devrel:easypermissions:$rootProject.easyPermissionsVersion"
    implementation "androidx.core:core-ktx:$rootProject.ktxVersion"

    /* android view vendor utils */
    implementation "com.github.bumptech.glide:glide:$rootProject.glideVersion"
    kapt "com.github.bumptech.glide:compiler:$rootProject.glideVersion"

    /* Unit Testing */
    testImplementation "junit:junit:$rootProject.junitVersion"
    androidTestImplementation "com.android.support.test:runner:$rootProject.androidRunnerVersion"

    /* ui testing */
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$rootProject.espressoCoreVersion"
}
